vanithak@~/project1$ terraform plan 
var.ec2_image_id
  EC2 AMI ID of the instance

  Enter a value: ami-0001f49b65fd1bd5e

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.aws_availability_zones.class04-az: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.class04-iam-instance-profile will be created
  + resource "aws_iam_instance_profile" "class04-iam-instance-profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "class04-iam-instance-profile"
      + path        = "/"
      + role        = "class04-iam-role"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy.class04-iam-policy will be created
  + resource "aws_iam_policy" "class04-iam-policy" {
      + arn         = (known after apply)
      + description = "Class04 IAM policy"
      + id          = (known after apply)
      + name        = "class04-iam-policy"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:Get*",
                          + "s3:List*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy_attachment.class04-iam-policy-attach will be created
  + resource "aws_iam_policy_attachment" "class04-iam-policy-attach" {
      + id         = (known after apply)
      + name       = "class04-iam-policy-attach"
      + policy_arn = (known after apply)
      + roles      = [
          + "class04-iam-role",
        ]
    }

  # aws_iam_role.class04-iam-role will be created
  + resource "aws_iam_role" "class04-iam-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "class04-iam-role"
      + path                  = "/"
      + tags                  = {
          + "tag-key" = "class04-s3-readonly-role"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.class04-iam-role-policy-attach will be created
  + resource "aws_iam_role_policy_attachment" "class04-iam-role-policy-attach" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "class04-iam-role"
    }

  # aws_instance.class04-ec2 will be created
  + resource "aws_instance" "class04-ec2" {
      + ami                          = "ami-0001f49b65fd1bd5e"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "class04-iam-instance-profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "class04-ec2-key"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.class04-igw will be created
  + resource "aws_internet_gateway" "class04-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "class04-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.class04-ec2-key will be created
  + resource "aws_key_pair" "class04-ec2-key" {
      + arn         = (known after apply)
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "class04-ec2-key"
      + key_pair_id = (known after apply)
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyDZgvl/gEJCNvS2x1kjcoOCZvPhP41c0OeSuIUkRCKwmYCJN4/qOBP+0dHFM7Mm69wKIBrWT71nyO2IH56C0EVf5mIao8p97U/vL1VmFDeyxSCAmeJ4IM5TF6gXpeUKMHXuhCOBaXrnsC/pSuv6UdCl4SRlkOCJmnug3ijXKS+aY5eViRfsCJ5LjJ3S7XGbpJFoq+PMgleRmzMc7FVEzf90mHNOAk5fW6pQdvTFyy9yHjQCzCedJNWumKVtytpACwRmNnYJd+firXODU7toYnPEaj0X1Tf1iRalobTSgVQ9EXNdCslBVdNQwsvRATi1gm+Dqu6ysCZ++MvZnYC7df WEBSERVER"
    }

  # aws_main_route_table_association.class04-rt-association will be created
  + resource "aws_main_route_table_association" "class04-rt-association" {
      + id                      = (known after apply)
      + original_route_table_id = (known after apply)
      + route_table_id          = (known after apply)
      + vpc_id                  = (known after apply)
    }

  # aws_route_table.class04-routetable will be created
  + resource "aws_route_table" "class04-routetable" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "class04-routetable"
        }
      + vpc_id           = (known after apply)
    }

  # aws_s3_bucket.class04-bucket will be created
  + resource "aws_s3_bucket" "class04-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "class04-s3-bucket04"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "Dev"
          + "Name"        = "class04-s3-bucket04"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.class04-sg will be created
  + resource "aws_security_group" "class04-sg" {
      + arn                    = (known after apply)
      + description            = "Class04 Security Group"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow SSH Connectivity"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "class04-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "class04-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.class04-subnet will be created
  + resource "aws_subnet" "class04-subnet" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "20.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "class04-subnet"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.class04-vpc will be created
  + resource "aws_vpc" "class04-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "20.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
    }

Plan: 14 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

