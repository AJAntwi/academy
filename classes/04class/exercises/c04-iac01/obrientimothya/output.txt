$ terraform plan -out iac01.tfplan

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.s3_instance_profile will be created
  + resource "aws_iam_instance_profile" "s3_instance_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "s3_instance_profile"
      + path        = "/"
      + role        = "s3_role"
      + unique_id   = (known after apply)
    }

  # aws_iam_role.s3_role will be created
  + resource "aws_iam_role" "s3_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "s3_role"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy.s3_policy will be created
  + resource "aws_iam_role_policy" "s3_policy" {
      + id     = (known after apply)
      + name   = "s3_policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::obrientimothyac04iac01",
                        ]
                    },
                  + {
                      + Action   = [
                          + "s3:PutObject",
                          + "s3:GetObject",
                          + "s3:DeleteObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::obrientimothyac04iac01/*",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # aws_instance.ec2_instance will be created
  + resource "aws_instance" "ec2_instance" {
      + ami                          = "ami-0c3a4ad3dbe082a72"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "s3_instance_profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "a1.medium"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "devopsacademy-keypair"
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + secondary_private_ips        = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "subnet-0c7d4b07b3f1df4b8"
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_s3_bucket.s3_bucket will be created
  + resource "aws_s3_bucket" "s3_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "obrientimothyac04iac01"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.ec2_allow_ssh will be created
  + resource "aws_security_group" "ec2_allow_ssh" {
      + arn                    = (known after apply)
      + description            = "Allow SSH inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH from Anywhere"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "ec2_allow_ssh"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = (known after apply)
    }

Plan: 6 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: iac01.tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "iac01.tfplan"

$ terraform apply iac01.tfplan

aws_iam_role.s3_role: Creating...
aws_security_group.ec2_allow_ssh: Creating...
aws_s3_bucket.s3_bucket: Creating...
aws_security_group.ec2_allow_ssh: Creation complete after 2s [id=sg-04d94933381a63181]
aws_iam_role.s3_role: Creation complete after 3s [id=s3_role]
aws_iam_role_policy.s3_policy: Creating...
aws_iam_instance_profile.s3_instance_profile: Creating...
aws_s3_bucket.s3_bucket: Creation complete after 4s [id=obrientimothyac04iac01]
aws_iam_role_policy.s3_policy: Creation complete after 2s [id=s3_role:s3_policy]
aws_iam_instance_profile.s3_instance_profile: Creation complete after 3s [id=s3_instance_profile]
aws_instance.ec2_instance: Creating...
aws_instance.ec2_instance: Still creating... [10s elapsed]
aws_instance.ec2_instance: Still creating... [20s elapsed]
aws_instance.ec2_instance: Creation complete after 22s [id=i-07dd9f0ff91ca3c96]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: ./terraform.tfstate



$ ssh -i ~/.ssh/devopsacademy-keypair.pem ec2-user@3.106.53.170
[ec2-user@ip-172-31-1-20 ~]$ aws s3 ls obrientimothyac04iac01
[ec2-user@ip-172-31-1-20 ~]$ exit


$ terraform destroy

❯ terraform destroy
aws_iam_role.s3_role: Refreshing state... [id=s3_role]
aws_security_group.ec2_allow_ssh: Refreshing state... [id=sg-04d94933381a63181]
aws_s3_bucket.s3_bucket: Refreshing state... [id=obrientimothyac04iac01]
aws_iam_role_policy.s3_policy: Refreshing state... [id=s3_role:s3_policy]
aws_iam_instance_profile.s3_instance_profile: Refreshing state... [id=s3_instance_profile]
aws_instance.ec2_instance: Refreshing state... [id=i-07dd9f0ff91ca3c96]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_iam_instance_profile.s3_instance_profile will be destroyed
  - resource "aws_iam_instance_profile" "s3_instance_profile" {
      - arn         = "arn:aws:iam::437637330966:instance-profile/s3_instance_profile" -> null
      - create_date = "2020-08-04T11:27:45Z" -> null
      - id          = "s3_instance_profile" -> null
      - name        = "s3_instance_profile" -> null
      - path        = "/" -> null
      - role        = "s3_role" -> null
      - unique_id   = "AIPAWLZJXXALEXJCRPCLQ" -> null
    }

  # aws_iam_role.s3_role will be destroyed
  - resource "aws_iam_role" "s3_role" {
      - arn                   = "arn:aws:iam::437637330966:role/s3_role" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "ec2.amazonaws.com"
                        }
                      - Sid       = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2020-08-04T11:27:43Z" -> null
      - force_detach_policies = false -> null
      - id                    = "s3_role" -> null
      - max_session_duration  = 3600 -> null
      - name                  = "s3_role" -> null
      - path                  = "/" -> null
      - tags                  = {} -> null
      - unique_id             = "AROAWLZJXXALDQ5AO33BS" -> null
    }

  # aws_iam_role_policy.s3_policy will be destroyed
  - resource "aws_iam_role_policy" "s3_policy" {
      - id     = "s3_role:s3_policy" -> null
      - name   = "s3_policy" -> null
      - policy = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "s3:ListBucket",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:s3:::obrientimothyac04iac01",
                        ]
                    },
                  - {
                      - Action   = [
                          - "s3:PutObject",
                          - "s3:GetObject",
                          - "s3:DeleteObject",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:s3:::obrientimothyac04iac01/*",
                        ]
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - role   = "s3_role" -> null
    }

  # aws_instance.ec2_instance will be destroyed
  - resource "aws_instance" "ec2_instance" {
      - ami                          = "ami-0c3a4ad3dbe082a72" -> null
      - arn                          = "arn:aws:ec2:ap-southeast-2:437637330966:instance/i-07dd9f0ff91ca3c96" -> null
      - associate_public_ip_address  = true -> null
      - availability_zone            = "ap-southeast-2b" -> null
      - cpu_core_count               = 1 -> null
      - cpu_threads_per_core         = 1 -> null
      - disable_api_termination      = false -> null
      - ebs_optimized                = false -> null
      - get_password_data            = false -> null
      - hibernation                  = false -> null
      - iam_instance_profile         = "s3_instance_profile" -> null
      - id                           = "i-07dd9f0ff91ca3c96" -> null
      - instance_state               = "running" -> null
      - instance_type                = "a1.medium" -> null
      - ipv6_address_count           = 0 -> null
      - ipv6_addresses               = [] -> null
      - key_name                     = "devopsacademy-keypair" -> null
      - monitoring                   = false -> null
      - primary_network_interface_id = "eni-065ae71f021617df8" -> null
      - private_dns                  = "ip-172-31-1-20.ap-southeast-2.compute.internal" -> null
      - private_ip                   = "172.31.1.20" -> null
      - public_dns                   = "ec2-3-106-53-170.ap-southeast-2.compute.amazonaws.com" -> null
      - public_ip                    = "3.106.53.170" -> null
      - secondary_private_ips        = [] -> null
      - security_groups              = [
          - "ec2_allow_ssh",
        ] -> null
      - source_dest_check            = true -> null
      - subnet_id                    = "subnet-0c7d4b07b3f1df4b8" -> null
      - tags                         = {} -> null
      - tenancy                      = "default" -> null
      - volume_tags                  = {} -> null
      - vpc_security_group_ids       = [
          - "sg-04d94933381a63181",
        ] -> null

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - volume_id             = "vol-07f01e74c77c81cd1" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # aws_s3_bucket.s3_bucket will be destroyed
  - resource "aws_s3_bucket" "s3_bucket" {
      - acl                         = "private" -> null
      - arn                         = "arn:aws:s3:::obrientimothyac04iac01" -> null
      - bucket                      = "obrientimothyac04iac01" -> null
      - bucket_domain_name          = "obrientimothyac04iac01.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "obrientimothyac04iac01.s3.ap-southeast-2.amazonaws.com" -> null
      - force_destroy               = false -> null
      - hosted_zone_id              = "Z1WCIGYICN2BYD" -> null
      - id                          = "obrientimothyac04iac01" -> null
      - region                      = "ap-southeast-2" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {} -> null

      - versioning {
          - enabled    = false -> null
          - mfa_delete = false -> null
        }
    }

  # aws_security_group.ec2_allow_ssh will be destroyed
  - resource "aws_security_group" "ec2_allow_ssh" {
      - arn                    = "arn:aws:ec2:ap-southeast-2:437637330966:security-group/sg-04d94933381a63181" -> null
      - description            = "Allow SSH inbound traffic" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
        ] -> null
      - id                     = "sg-04d94933381a63181" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "SSH from Anywhere"
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
        ] -> null
      - name                   = "ec2_allow_ssh" -> null
      - owner_id               = "437637330966" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {} -> null
      - vpc_id                 = "vpc-e4576e83" -> null
    }

Plan: 0 to add, 0 to change, 6 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_iam_role_policy.s3_policy: Destroying... [id=s3_role:s3_policy]
aws_instance.ec2_instance: Destroying... [id=i-07dd9f0ff91ca3c96]
aws_s3_bucket.s3_bucket: Destroying... [id=obrientimothyac04iac01]
aws_s3_bucket.s3_bucket: Destruction complete after 0s
aws_iam_role_policy.s3_policy: Destruction complete after 1s
aws_instance.ec2_instance: Still destroying... [id=i-07dd9f0ff91ca3c96, 10s elapsed]
aws_instance.ec2_instance: Still destroying... [id=i-07dd9f0ff91ca3c96, 20s elapsed]
aws_instance.ec2_instance: Still destroying... [id=i-07dd9f0ff91ca3c96, 30s elapsed]
aws_instance.ec2_instance: Still destroying... [id=i-07dd9f0ff91ca3c96, 40s elapsed]
aws_instance.ec2_instance: Destruction complete after 40s
aws_iam_instance_profile.s3_instance_profile: Destroying... [id=s3_instance_profile]
aws_security_group.ec2_allow_ssh: Destroying... [id=sg-04d94933381a63181]
aws_security_group.ec2_allow_ssh: Destruction complete after 0s
aws_iam_instance_profile.s3_instance_profile: Destruction complete after 2s
aws_iam_role.s3_role: Destroying... [id=s3_role]
aws_iam_role.s3_role: Destruction complete after 3s

Destroy complete! Resources: 6 destroyed.
